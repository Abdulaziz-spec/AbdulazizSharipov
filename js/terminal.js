const input = document.getElementById('command-input');
const output = document.getElementById('output');

const commands = {
    help: `
  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
   - about      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ
   - projects   - –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
   - contact    - –ö–æ–Ω—Ç–∞–∫—Ç—ã
   - hack       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –≤–∑–ª–æ–º
   - clear      - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
   - ls         - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
   - pwd        - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
   - top        - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
   - htop       - –¢–æ –∂–µ, —á—Ç–æ –∏ top
   - cat        - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, cat secret.txt)
   - decrypt    - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, decrypt darknet_secret.txt)
    `,
    about: `
  –ò–º—è: Abdulaziz Sharipov
  –†–æ–ª—å: Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
  –ù–∞–≤—ã–∫–∏: Python, Linux, API, Telegram Bots, OOP
    `,
    projects: `
    üìÅ <a href="https://github.com/Abdulaziz-spec/Music-Finder" target="_blank" rel="noopener noreferrer">TelegramMusicBot</a><br>
    üìÅ <a href="https://github.com/Abdulaziz-spec/AbdulazizSharipov" target="_blank" rel="noopener noreferrer">My Site</a><br>
    üìÅ <a href="https://github.com/Abdulaziz-spec/API-bot-NASA-ISS" target="_blank" rel="noopener noreferrer">NASA API's</a>
  `,
  
    contact: `
  Telegram: @BlackObamalol
  GitHub: https://github.com/Abdulaziz-spec
  Email: amudarya.add@gmail.com
    `,
    secret: `
                        ************
                        *  –°–ï–ö–†–ï–¢  *
                        ************
                    –î–û–ö–õ–ê–î –°–ü–ï–¶–û–ü–ï–†–ê–¶–ò–ò                       
                       "BLACK MIRROR"  
[*] –í–∞–º –Ω–µ –•–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏–µ –ú–æ–∂–µ—Ç –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤ —Ñ–∞–π–ª–µ darknet_secret.txt?....      
    `,
    darknet_secret: `
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
  ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà
  ‚ñà                                     –î–û–ö–õ–ê–î –°–ü–ï–¶–û–ü–ï–†–ê–¶–ò–ò                              ‚ñà
  ‚ñà                                       "BLACK MIRROR"                                 ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà  –¶–ï–õ–¨: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤                       ‚ñà
  ‚ñà        –≤ –¥–∞—Ä–∫–Ω–µ—Ç–µ.                                                                   ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà  –í–†–ï–ú–Ø: 2025-06-01                                                                   ‚ñà
  ‚ñà  –õ–û–ö–ê–¶–ò–Ø: –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–µ—Ç—Å—è                                                            ‚ñà
  ‚ñà  –ö–û–î–û–í–û–ï –ò–ú–Ø: BM-Alpha                                                               ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                                   –û–ü–ï–†–ê–¢–ò–í–ù–´–ï –î–ê–ù–ù–´–ï                                 ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà 1) –í–∑–ª–æ–º–∞–Ω–æ 18 –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —É–∑–ª–æ–≤ Tor, –≤–∫–ª—é—á–∞—è 3 ¬´–≤—Ö–æ–¥–Ω—ã—Ö —à–ª—é–∑–∞¬ª                        ‚ñà
  ‚ñà 2) –ò–∑–≤–ª–µ—á–µ–Ω–æ ~320 GB –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:                                           ‚ñà
  ‚ñà    - –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—Ä—Ö–∏–≤—ã                                                              ‚ñà
  ‚ñà    - –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π                                                              ‚ñà
  ‚ñà    - –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–∞—Ä–æ–ª–∏                                                          ‚ñà
  ‚ñà 3) –ú–µ—Ç–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: AES-256, RSA 4096, ChaCha20                                    ‚ñà
  ‚ñà 4) –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞: 72 —á–∞—Å–∞                                                          ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                        –ê–ù–ê–õ–ò–ó –ü–û–õ–£–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà - –í—ã—è–≤–ª–µ–Ω–æ 12 –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø–∏—Ä–æ–≤–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π                            ‚ñà
  ‚ñà   –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏.                                                  ‚ñà
  ‚ñà - –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞                         ‚ñà
  ‚ñà   –≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö (.png, .mp4).                                                        ‚ñà
  ‚ñà - –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Å IP, –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ —á–µ—Ä–µ–∑ Tor bridges.                   ‚ñà
  ‚ñà - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã.                  ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                       –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø                                  ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö.                           ‚ñà
  ‚ñà * –ù–µ —Ä–∞–∑–≥–ª–∞—à–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –≤–Ω–µ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞.                              ‚ñà
  ‚ñà * –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ VPN –∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.            ‚ñà
  ‚ñà * –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∏ –∏ —Ö–µ—à-—Å—É–º–º—ã –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.                       ‚ñà
  ‚ñà * –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.                     ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                             –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û                                            ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà [!] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å CVE-2025-1234:                                             ‚ñà
  ‚ñà     - –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é                                ‚ñà
  ‚ñà     - –ê–∫—Ç–∏–≤–Ω–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –¥–∞—Ä–∫–Ω–µ—Ç–µ                                             ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà [!] –ò–ù–î–ò–ö–ê–¢–û–†–´ –ö–û–ú–ü–†–û–ú–ò–¢–ê–¶–ò–ò (IOC):                                                  ‚ñà
  ‚ñà     ‚Ä¢ IP: 185.230.12.10                                                              ‚ñà
  ‚ñà     ‚Ä¢ –•–µ—à SHA256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855   ‚ñà
  ‚ñà     ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: ¬´blackmirror-team¬ª                                                    ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                           –ö–û–î–û–í–´–ï –§–†–ê–ì–ú–ï–ù–¢–´                                          ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà 7F2A-9BC4-3D12-FF8E                                                                  ‚ñà
  ‚ñà 1F8E-3C9B-A6DE-72F1                                                                  ‚ñà
  ‚ñà 0B2F-7D4A-E91C-5A3B                                                                  ‚ñà
  ‚ñà                                                                                      ‚ñà
  ‚ñà--------------------------------------------------------------------------------------‚ñà
  ‚ñà                         –ö–û–ù–ï–¶ –î–û–ö–õ–ê–î–ê                                                ‚ñà
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
    `,
    decrypt_message: `
  [–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞]
  
  –í–ù–ò–ú–ê–ù–ò–ï!
  
  –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ü–µ–ª—å—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
  
  "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–∏–∫–∞–∫–æ–π —É–¥–∞—á–∏,
  –µ—Å–ª–∏ —Ç—ã –Ω–µ –±—Ä–æ—Å–∏—à—å –º–æ–Ω–µ—Ç—É –≤ –∫–æ–ª–æ–¥–µ—Ü."
  
  –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å–∫–∞—Ç—å... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–ª–∞–±—å—Å—è.
    `,
    malware: `
  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –§–∞–π–ª Malware.exe —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥.
  –ï–≥–æ –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.
    `

  };
  

  commands["notes.txt"] = `
  üìí –ó–∞–º–µ—Ç–∫–∏:
  - 2025-06-01: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ Music Finder.
  - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ 15:00.
  - –ù–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CVE-2025-1234.
  - –ò–¥–µ—è: –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ TelegramMusicBot.
`;


commands["config.json"] = `
{
  "botToken": "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
  "adminUser": "Abdulaziz",
  "maxConnections": 100,
  "enableLogging": true,
  "theme": "dark"
}
`;


commands["projects/"] = `
  TelegramMusicBot/
  AbdulazizSharipov/
  API-bot-NASA-ISS/
`;

commands["decrypt_message.txt"] = `
  [–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]
  
  "–ù–µ –≤—Å—ë –∑–æ–ª–æ—Ç–æ, —á—Ç–æ –±–ª–µ—Å—Ç–∏—Ç.
  –ò–Ω–æ–≥–¥–∞ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É ‚Äî –≤–Ω—É—Ç—Ä–∏."
`;

  
  
function typeLog(text, className = 'command', callback) {
  let i = 0;
  const div = document.createElement('div');
  div.className = className;
  output.appendChild(div);

  function type() {
    if (i < text.length) {
      div.textContent += text.charAt(i);
      i++;
      output.scrollTop = output.scrollHeight;
      setTimeout(type, typingSpeed / fastMode);
    } else if (callback) {
      callback();
    }
  }
  type();
}

function fakeLS(callback) {
  const files = [
    "README.md",
    "projects/",
    "notes.txt",
    "scripts/",
    "config.json",
    "data.csv",
    "secret.txt",
    "darknet_secret.txt",
    "decrypt_message.txt",
    "Malware.exe",
  ];
  typeLog(files.join("  "), "success", callback);
}

function fakePWD(callback) {
  const path = "/home/abdulaziz";
  typeLog(path, "success", callback);
}

function fakeTop(callback) {
  const currentUser = getCurrentUserInfo();

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function getRandomIP() {
    return `${getRandomInt(10, 250)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}`;
  }

  const fakeProcesses = [
    { pid: 2345, user: "user1234", cpu: "7.8%", mem: "4.5%", command: "python", ip: getRandomIP() },
    { pid: 3456, user: "user5678", cpu: "3.3%", mem: "2.0%", command: "node", ip: getRandomIP() },
    { pid: 4567, user: "user9101", cpu: "1.1%", mem: "0.7%", command: "vim", ip: getRandomIP() },
    { pid: 5678, user: "root", cpu: "0.0%", mem: "0.1%", command: "cron", ip: getRandomIP() },
  ];

  const processes = [
    { pid: 9999, user: "you", cpu: "12.5%", mem: "8.2%", command: "browser", ip: currentUser.ip }
  ].concat(fakeProcesses);

  const header = "PID    USER                 CPU%   MEM%   COMMAND    IP";

  typeLog(header, "command", () => {
    let i = 0;

    function padRight(str, len) {
      if (str.length >= len) return str;
      return str + " ".repeat(len - str.length);
    }

    function showNextProcess() {
      if (i < processes.length) {
        const p = processes[i];
        const line =
          padRight(p.pid.toString(), 6) +
          padRight(p.user, 21) +
          padRight(p.cpu, 7) +
          padRight(p.mem, 7) +
          padRight(p.command, 11) +
          p.ip;
        typeLog(line, "success", () => {
          i++;
          setTimeout(showNextProcess, 200);
        });
      } else if (callback) {
        callback();
      }
    }
    showNextProcess();
  });
}

function getCurrentUserInfo() {
  const ua = navigator.userAgent;

  let os = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°";
  if (ua.indexOf("Win") !== -1) os = "Windows";
  else if (ua.indexOf("Mac") !== -1) os = "macOS";
  else if (ua.indexOf("Linux") !== -1) os = "Linux";
  else if (ua.indexOf("Android") !== -1) os = "Android";
  else if (ua.indexOf("like Mac") !== -1) os = "iOS";

  let browser = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä";
  if (ua.indexOf("Chrome") !== -1) browser = "Google Chrome";
  else if (ua.indexOf("Firefox") !== -1) browser = "Mozilla Firefox";
  else if (ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1) browser = "Safari";
  else if (ua.indexOf("Edg") !== -1) browser = "Microsoft Edge";
  else if (ua.indexOf("Opera") !== -1 || ua.indexOf("OPR") !== -1) browser = "Opera";

  const ip = "192.168.1.42";

  return {
    username: "you (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)",
    ip,
    os,
    browser,
    lastSeen: new Date().toLocaleString()
  };
}

function fakeHackWithUserInfo(callback) {
  const logs = [
    "[*] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∑–ª–æ–º–∞...",
    "[*] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...",
    "[*] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...",
    "[*] –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...",
    "[!] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å CVE-2025-1234",
    "[*] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞...",
    "[*] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ root...",
    "[*] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...",
    "[*] –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è..."
  ];

  let idx = 0;

  function nextLog() {
    if (idx < logs.length) {
      let cls = "command";
      if (logs[idx].startsWith("[!]")) cls = "error";
      typeLog(logs[idx], cls, () => {
        idx++;
        setTimeout(nextLog, 400);
      });
    } else {
      showUserList();
    }
  }

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function getRandomIP() {
    return `${getRandomInt(10, 250)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}.${getRandomInt(0, 255)}`;
  }

  function getRandomOS() {
    const osList = ["Windows 10", "Windows 11", "macOS Ventura", "Ubuntu 22.04", "Debian 11", "Android 13", "iOS 16"];
    return osList[getRandomInt(0, osList.length - 1)];
  }

  function getRandomBrowser() {
    const browsers = ["Google Chrome", "Mozilla Firefox", "Safari", "Microsoft Edge", "Opera", "Brave"];
    return browsers[getRandomInt(0, browsers.length - 1)];
  }

  const currentUser = getCurrentUserInfo();
  const fakeUsers = [currentUser];
  const usersCount = 6;

  for (let i = 0; i < usersCount; i++) {
    fakeUsers.push({
      username: `user${getRandomInt(1000, 9999)}`,
      ip: getRandomIP(),
      os: getRandomOS(),
      browser: getRandomBrowser(),
      lastSeen: new Date(Date.now() - getRandomInt(0, 86400000)).toLocaleString()
    });
  }

  let userIndex = 0;

  function showUserList() {
    if (userIndex < fakeUsers.length) {
      const u = fakeUsers[userIndex];
      const line = `[${userIndex + 1}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${u.username} | IP: ${u.ip} | –û–°: ${u.os} | –ë—Ä–∞—É–∑–µ—Ä: ${u.browser} | –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${u.lastSeen}`;
      typeLog(line, "success", () => {
        userIndex++;
        setTimeout(showUserList, 300);
      });
    } else {
      typeLog("[*] –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!", "command");
      if (callback) callback();
    }
  }

  nextLog();
}

let typingSpeed = 25;
let fastMode = 1;
const maxFastMode = 4;

function runCommand(cmd) {
    if (!cmd) return;
    output.innerHTML += `<div><span class="prompt">[root@abdulaziz ~]#</span> ${cmd}</div>`;
    const c = cmd.toLowerCase();
  
    if (c === "clear") {
      output.innerHTML = "";
    } else if (c === "help") {
      typeLog(commands.help, "command");
    } else if (c === "hack") {
      fakeHackWithUserInfo();
    } else if (c === "ls") {
      fakeLS();
    } else if (c === "pwd") {
      fakePWD();
    } else if (c === "top" || c === "htop") {
      fakeTop();
    } else if (c.startsWith("cat ")) {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
      const fileOriginal = cmd.slice(4).trim();
      // –ò —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const fileLower = fileOriginal.toLowerCase();
  
      if (fileLower === "secret.txt") {
        typeLog(commands.secret, "success");
      } else if (fileLower === "darknet_secret.txt") {
        typeLog(commands.darknet_secret, "success");
      } else if (fileLower === "malware.exe") {
        typeLog(commands.malware, "success");
      } 
      else if (fileLower === "notes.txt") {
        typeLog(commands["notes.txt"], "success");
      }
        else if (fileLower === "config.json") {
        typeLog(commands["config.json"], "success");
      } else if (fileLower === "decrypt_message.txt") {
        typeLog(commands["decrypt_message.txt"], "success");
      } else if (fileLower === "projects/") {
        typeLog(commands["projects/"], "success");
      }
      
      else {
        typeLog(`cat: —Ñ–∞–π–ª "${fileOriginal}" –Ω–µ –Ω–∞–π–¥–µ–Ω`, "error");
      }
    } else if (c.startsWith("decrypt ")) {
      const fileLower = cmd.slice(8).trim().toLowerCase();
      if (fileLower === "darknet_secret.txt") {
        typeLog("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ darknet_secret.txt...", "command", () => {
          setTimeout(() => {
            typeLog(commands.decrypt_message, "success");
          }, 1500);
        });
      } else {
        typeLog(`decrypt: —Ñ–∞–π–ª "${cmd.slice(8).trim()}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ`, "error");
      }
    } else if (c === "malware.exe") {
      fakeMalwareExecution();
    } else if (commands[c]) {
      typeLog(commands[c], "command");
    } else {
      typeLog(`–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${cmd}`, "error");
    }
    output.scrollTop = output.scrollHeight;
  }
  


  
  function fakeMalwareExecution(callback) {
    const currentUser = getCurrentUserInfo();
  
    const logs = [
      "[*] –ó–∞–ø—É—Å–∫ Malware.exe...",
      "[*] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞...",
      "[*] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...",
      "[!] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–µ –ü–û. –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞...",
      "[*] –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
      `[*] –≠—Ç–æ –ë—ã–ª–∞ –¢—Ä–æ—è–Ω—Å–∫–∞—è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¢–µ–ø–µ—Ä—å –≤—Å–µ –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏ —É –•–∞–∫–µ—Ä–∞ –≤–æ—Ç —Ç–≤–æ–π IP –ê–¥—Ä–µ—Å—Å ${currentUser.ip}`,
      "[*] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...",
      "[*] –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...",
      "[*] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Malware.exe",
      "[*] –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ Malware.exe",
      "[*] –í–Ω–∏–º–∞–Ω–∏–µ: –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ë–´–õ–ê –∑–∞—Ä–∞–∂–µ–Ω–∞!"
    ];
  
    let idx = 0;
  
    function showNextLog() {
      if (idx < logs.length) {
        let cls = "command";
        if (logs[idx].startsWith("[!]")) cls = "error";
        typeLog(logs[idx], cls, () => {
          idx++;
          setTimeout(showNextLog, 600);
        });
      } else if (callback) {
        callback();
      }
    }
  
    showNextLog();
  }
  
  
let commandHistory = [];
let historyIndex = -1;  // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏

function onCommandEnter(cmd) {
    if (cmd.trim() !== "") {
      commandHistory.push(cmd);
      historyIndex = commandHistory.length;  // –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–µ–∫—Å
    }
    runCommand(cmd);
  }

  
  input.addEventListener("keydown", function(e) {
    if (e.key === "Tab") {
      e.preventDefault();
      // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Tab –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–µ –≤ input
      if (commandHistory.length > 0) {
        if (historyIndex === commandHistory.length) {
          // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ" (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã),
          // —Å–¥–≤–∏–Ω–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
          historyIndex = commandHistory.length - 1;
        }
        input.value = commandHistory[historyIndex];
      }
    }
    else if (e.key === "ArrowUp") {
      e.preventDefault();
      if (commandHistory.length === 0) return;
      if (historyIndex > 0) {
        historyIndex--;
        input.value = commandHistory[historyIndex];
      } else if (historyIndex === -1) {
        historyIndex = commandHistory.length - 1;
        input.value = commandHistory[historyIndex];
      }
    }
    else if (e.key === "ArrowDown") {
      e.preventDefault();
      if (commandHistory.length === 0) return;
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        input.value = commandHistory[historyIndex];
      } else {
        historyIndex = commandHistory.length;
        input.value = "";
      }
    }
    else if (e.key === "Enter") {
      e.preventDefault();
      const cmd = input.value.trim();
      if (cmd !== "") {
        commandHistory.push(cmd);
        historyIndex = commandHistory.length; // —Å–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        runCommand(cmd);
        input.value = "";
      }
    }
  });
  
  
  
  
input.addEventListener("keydown", e => {
  if (e.key === "Escape") {
    fastMode++;
    if (fastMode > maxFastMode) fastMode = 1;
  }

  if (e.key === "Enter") {
    e.preventDefault();
    const val = input.value.trim();
    input.value = "";
    runCommand(val);
  }
});

window.onload = () => {
  runCommand("help");
  input.focus();
};
